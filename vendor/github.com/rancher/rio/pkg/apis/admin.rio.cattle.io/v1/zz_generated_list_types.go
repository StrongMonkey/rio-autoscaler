/*
Copyright 2019 Rancher Labs.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by main. DO NOT EDIT.

// +k8s:deepcopy-gen=package
// +groupName=admin.rio.cattle.io
package v1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object

// ClusterDomainList is a list of ClusterDomain resources
type ClusterDomainList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata"`

	Items []ClusterDomain `json:"items"`
}

func NewClusterDomain(namespace, name string, obj ClusterDomain) *ClusterDomain {
	obj.APIVersion, obj.Kind = SchemeGroupVersion.WithKind("ClusterDomain").ToAPIVersionAndKind()
	obj.Name = name
	obj.Namespace = namespace
	return &obj
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object

// RioInfoList is a list of RioInfo resources
type RioInfoList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata"`

	Items []RioInfo `json:"items"`
}

func NewRioInfo(namespace, name string, obj RioInfo) *RioInfo {
	obj.APIVersion, obj.Kind = SchemeGroupVersion.WithKind("RioInfo").ToAPIVersionAndKind()
	obj.Name = name
	obj.Namespace = namespace
	return &obj
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object

// PublicDomainList is a list of PublicDomain resources
type PublicDomainList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata"`

	Items []PublicDomain `json:"items"`
}

func NewPublicDomain(namespace, name string, obj PublicDomain) *PublicDomain {
	obj.APIVersion, obj.Kind = SchemeGroupVersion.WithKind("PublicDomain").ToAPIVersionAndKind()
	obj.Name = name
	obj.Namespace = namespace
	return &obj
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object

// SystemStackList is a list of SystemStack resources
type SystemStackList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata"`

	Items []SystemStack `json:"items"`
}

func NewSystemStack(namespace, name string, obj SystemStack) *SystemStack {
	obj.APIVersion, obj.Kind = SchemeGroupVersion.WithKind("SystemStack").ToAPIVersionAndKind()
	obj.Name = name
	obj.Namespace = namespace
	return &obj
}
